// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  image          String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  sessions       Session[]
  accounts       Account[]
  playlist       String[]  @db.ObjectId
  isAdmin        Boolean
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Genre {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  createdAt DateTime @default(now())
}

model Movie {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  trailerHost   String
  trailerSource String
  trailerUrl    String
  thumbnailUrl  String
  genreIds      String[]  @db.ObjectId
  release       DateTime
  releaseFull   Boolean
  rate          Float
  rateCount     Int
  oneShot       Boolean
  Season        Season[]
  Episode       Episode[]
}

model Season {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  movieId String @db.ObjectId
  order   Int

  movie   Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)
  Episode Episode[]

  @@unique([movieId, order])
}

model Episode {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  movieId     String @db.ObjectId
  seasonId    String @db.ObjectId
  order       Int
  videoHost   String
  videoSource String
  videoUrl    String

  movie  Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  season Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)

  @@unique([movieId, seasonId, order])
}
